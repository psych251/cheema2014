cutoff_10per <-4911 #Cheema (2014) rounded off 90% of 5455 obs as 4910
#pisa_5persample <- sample_frac(pisa_filter, 0.95)
#the code above didnt work
pisa_5persample <- pisa_filter %>%
tibble::rowid_to_column("new_rowid") %>%
mutate(math_achievement2= ifelse(new_rowid<(cutoff_5per),math_achievement,NA)) %>%
select(-c(new_rowid)) %>%
select(-c(ANXMAT, HEDRES,math_achievement, rv))
pisa_10persample <- pisa_filter %>%
tibble::rowid_to_column("new_rowid") %>%
mutate(math_achievement2= ifelse(new_rowid<(cutoff_10per),math_achievement,NA)) %>%
select(-c(new_rowid)) %>%
select(-c(ANXMAT, HEDRES,math_achievement, rv))
summary(pisa_filter)
lm_fulldata=lm(math_achievement ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=pisa_filter)
summary(lm_fulldata)
#List wise deletion is the same as not making any adjustments to the missing data
lm_ld_5per=lm(math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=pisa_5persample)
lm_ld_10per=lm(math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=pisa_10persample)
lm_fulldata lm_ld_5per
lm_ld_10per
summary(lm_fulldata lm_ld_5per)
summary(lm_fulldata)
summary(lm_ld_5per)
mean_math <- mean(pisa_10persample$math_achievement2, na.rm = T) #calculate mean score to be used for imputation
mean_math
pisa_10persample_mi <- pisa_10persample %>%
rowwise() %>%
mutate(math_mi=ifelse(is.na(math_achievement2),mean_math,math_achievement2))
lm_mi_10per=lm(math_mi ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=pisa_10persample_mi)
summary(lm_mi_10per)
lm_ri_5per=lm(math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=imp2)
summary(lm_ri_5per)
lm_ri_5per=lm(math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=imp2)
summary(lm_ri_5per)
summary(lm_ld_5per)
imp <- mice(pisa_10persample, method = "norm.nob", m = 1) # Impute data
#norm.predict = regression imputation with error
#norm.nob = regression imputation stochastic
imp2 <- complete(imp) # Store datasummary(imp2)
summary(imp2)
lm_ri_10per=lm(math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=imp2)
summary(lm_ri_10per)
imp <- mice(pisa_10persample, method = "norm.nob", m = 1) # Impute data
#norm.predict = regression imputation with error
#norm.nob = regression imputation stochastic
imp2 <- complete(imp) # Store datasummary(imp2)
summary(imp2)
imp <- mice(pisa_5persample, method = "norm.nob", m = 1) # Impute data
#norm.predict = regression imputation with error
#norm.nob = regression imputation stochastic
imp2 <- complete(imp) # Store datasummary(imp2)
summary(imp2)
imp
summary(imp)
summary(pisa_5persample)
imp <- mice(pisa_5persample, method = "norm.nob", m = 1) # Impute data
#norm.predict = regression imputation with error
#norm.nob = regression imputation stochastic
imp2 <- complete(imp) # Store datasummary(imp2)
summary(imp)
lm_ri_5per=lm(math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=imp2)
summary(lm_ri_5per)
lm_ri_5per=lm(math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=imp)
summary(imp)
summary(imp2)
md.pattern(pisa_10persample, plot = F)
imp <- mice(pisa_10persample, m=5, maxit=10, meth='pmm',seed=500, printFlag = F)
#mice is the package for performing multiple imputations
#m=5: number of multiple imputations i.e. 5 completed datasets will be generated
#maxit=10: number of iterations run
#pmm: predictive mean matching
summary(pisa_10persample)
summary(imp) #we see that the missing values
#modelFit1 <- with(imp,lm(math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement))
#modelFit1 #the regression has been run for each of the imputed datasets
#summary(pool(modelFit1)) #this pools the results from the 5 regressions
#write function to output result
#create a list from imputation - makes export easier
implist <- miceadds::mids2datlist(imp)
modelFit2 <- with(implist,lm(math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement))
summary(pool(modelFit2))
extract.df <- function(tt, cl = NULL) {
require(sandwich)
require(mitools)
require(texreg)
m2 <- length(tt) #number of imputations
betas <- lapply(tt, coef)
vars <- lapply(tt, vcov)
# conduct statistical inference and save results into a data.frame
model1 <- summary(pool_mi(betas, vars))
R2 <- mean(sapply(1:m2, function(x) summary(tt[[x]])$r.squared))
#technically, should use R to Z-- but close for now when R is low
ns <- nobs(tt[[1]])
#creates what is used by texreg
tr <- createTexreg(
coef.names = row.names(model1),
coef = model1$results,
se = model1$se,
pvalues = model1$p,
gof.names = c("R2", "Nobs"),
gof = c(R2, ns),
gof.decimal = c(T,F)
)
}
out1 <- extract.df(modelFit2)
screenreg(out1, digits = 3)
lm_multim_5per = screenreg(out1, digits = 3)
lm_multim_5per
export_summs(lm_fulldata lm_ld_5per lm_mi_5per lm_ri_5per lm_multim_5per)
export_summs(lm_fulldata lm_ld_5per)
export_summs(lm_fulldata)
summary(lm_ld_5per)
export_summs(lm_fulldata, lm_ld_5per, lm_mi_5per, lm_ri_5per, lm_multim_5per)
summary(lm_mi_5per)
lm_mi_5per=lm(math_mi ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=pisa_5persample_mi)
##5% data
mean_math <- mean(pisa_5persample$math_achievement2, na.rm = T) #calculate mean score to be used for imputation
pisa_5persample_mi <- pisa_5persample %>%
rowwise() %>%
mutate(math_mi=ifelse(is.na(math_achievement2),mean_math,math_achievement2))
#Run the regression using the imputed mean
lm_mi_5per=lm(math_mi ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=pisa_5persample_mi)
export_summs(lm_fulldata, lm_ld_5per, lm_mi_5per, lm_ri_5per, lm_multim_5per)
export_summs(lm_fulldata, lm_ld_5per, lm_mi_5per, lm_ri_5per)
summary(lm_multim_5per)
screenreg(out1, digits = 3)
lm_multim_5per
summary(lm_multim_5per)
export_summs(lm_fulldata, lm_ld_5per, lm_mi_5per, lm_ri_5per)
export_summs(lm_fulldata, lm_ld_5per, lm_mi_5per, lm_ri_5per, error_style = c("stderr", "ci", "statistic", "pvalue"))
export_summs(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, error_style = c("stderr", "ci", "statistic", "pvalue"), model.names = c("Full model","List wise deletion", "Mean imputation", "Regression imputation"))
x =summary(pool(modelFit2))
View(x)
modelFit2 <- as.data.frame(with(implist,lm(math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement)))
pool(modelFit2)
summary(pool(modelFit2))
export_summs(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per x, error_style = c("stderr", "ci", "statistic", "pvalue"), model.names = c("Full model","List wise deletion", "Mean imputation", "Regression imputation")), lm_multim_5per)
lm_multim_10per =screenreg(out1, digits = 3)
knitr::kable(lm_fulldata, lm_ld_5per, lm_mi_5per)
d <- coef(summary(lm_fulldata))
knitr::kable(d)
d <- coef(summary(lm_fulldata))
knitr::kable(d)
d
coef(summary(lm_fulldata))
d
knitr::kable(d)
rownames(d) <- c("$\\beta_0$", "$\\beta_1$")
library(knitr)
knitr::kable(d)
modelFit3 <- pisa_5persample %>%
mice(m=5, maxit=10, meth='pmm',seed=500, printFlag = F) %>%
mice::complete("long")  %>%
by(as.factor(.$.imp), lm, formula = math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement) %>%
pool()
modelFit3
modelFit3 <- pisa_5persample %>%
mice(m=5, maxit=10, meth='pmm',seed=500, printFlag = F) %>%
mice::complete("long")  %>%
by(as.factor(.$.imp), lm, formula = math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement) %>%
as.list() %>%
.[[-1]] %>%
pool()
modelFit2
out1
export_summs(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per out1, error_style = c("stderr", "ci", "statistic", "pvalue"), model.names = c("Full model","List wise deletion", "Mean imputation", "Regression imputation", ""))
lm_multim_10per
export_summs(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per lm_multim_10per, error_style = c("stderr", "ci", "statistic", "pvalue"), model.names = c("Full model","List wise deletion", "Mean imputation", "Regression imputation", ""))
export_summs(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, lm_multim_10per, error_style = c("stderr", "ci", "statistic", "pvalue"), model.names = c("Full model","List wise deletion", "Mean imputation", "Regression imputation", ""))
export_summs(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1, error_style = c("stderr", "ci", "statistic", "pvalue"), model.names = c("Full model","List wise deletion", "Mean imputation", "Regression imputation", ""))
## Load Relevant Libraries and Functions
## Default repo
##local({r <- getOption("repos")
##       r["CRAN"] <- "https://cloud.r-project.org"
##       options(repos=r)
##})
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(readr)
library(norm)
library(knitr)
#install.packages("mice")  #package for regression imputation
library("mice")
#install.packages("miceadds")
library(miceadds)
library(sandwich)
library(mitools)
library(texreg)
#install.packages("jtools")
library(jtools)
install.packages("huxtable")
library(huxtable)
#?sandwich
#install.packages("sandwich")
#install.packages(mitools)
#install.packages("texreg")
#### Import data
url <- '/Users/radhika/Documents/Stanford readings/251 Experimental methods/Project/cheema2014/PISA data/Extracted data/PISA 2003 Student Background.csv'
pisa <-read.csv(url)
# Variables selected are: IDs, gender, math anxiety, household, education resources, plausible values for math and reading
#### Prepare data for analysis - create columns etc.
####Calculate mean
pisa = pisa %>%
rowwise() %>%
mutate(math_achievement = mean(c(PV1MATH, PV2MATH, PV3MATH, PV4MATH, PV5MATH))) %>%
mutate(read_achievement=mean(c(PV1READ, PV2READ, PV3READ, PV4READ, PV5READ)))
#### Data exclusion / filtering
pisa = pisa %>%
rename(student_gender = ST03Q01, studentID=STIDSTD) %>%
select(c("studentID", "SCHOOLID", "student_gender","ANXMAT", "HEDRES", "math_achievement", "read_achievement"))
head(pisa)
nrow(pisa)
colnames(pisa)
summary(pisa)
#Paper says math and reading scores are normally distributed - plotting to check
ggplot(pisa, aes(x=math_achievement)) + geom_histogram()
ggplot(pisa, aes(x=read_achievement)) + geom_histogram()
#Check for outliers in variables of interest
colnames(pisa)
unique(pisa$student_gender)
unique(pisa$HEDRES)
#Check outliers in math anxiety
ggplot(pisa, aes(x=ANXMAT)) + geom_histogram()
#Student gender, Math anxiety seems to have outliers - checking to see all possible values in it
pisa_filter=pisa %>%
mutate(ANXMAT=replace(ANXMAT, ANXMAT>=999, NA)) %>%
mutate(HEDRES=replace(HEDRES, HEDRES>=999, NA)) %>%
filter(student_gender<3,
!is.na(student_gender))
mean_anxmat <- mean(pisa_filter$ANXMAT, na.rm=T)
sd_anxmat <- sd(pisa_filter$ANXMAT, na.rm=T)
mean_hedres <- mean(pisa_filter$HEDRES, na.rm=T)
sd_hedres <- sd(pisa_filter$HEDRES, na.rm=T)
pisa_filter=pisa_filter %>%
mutate(stdANXMAT= (ANXMAT-mean_anxmat)/sd_anxmat) %>%
mutate(stdHEDRES= (HEDRES-mean_hedres)/sd_hedres)
#Drop 5% and 10% of the PISA data
set.seed(123)
pisa_filter <- pisa_filter %>%
mutate(rv = rnorm(n())) %>%
arrange(rv)
cutoff_5per <-5183 #Cheema (2014) rounded off 95% of 5455 obs as 5182, preserving that
cutoff_10per <-4911 #Cheema (2014) rounded off 90% of 5455 obs as 4910
#pisa_5persample <- sample_frac(pisa_filter, 0.95)
#the code above didnt work
pisa_5persample <- pisa_filter %>%
tibble::rowid_to_column("new_rowid") %>%
mutate(math_achievement2= ifelse(new_rowid<(cutoff_5per),math_achievement,NA)) %>%
select(-c(new_rowid)) %>%
select(-c(ANXMAT, HEDRES,math_achievement, rv))
pisa_10persample <- pisa_filter %>%
tibble::rowid_to_column("new_rowid") %>%
mutate(math_achievement2= ifelse(new_rowid<(cutoff_10per),math_achievement,NA)) %>%
select(-c(new_rowid)) %>%
select(-c(ANXMAT, HEDRES,math_achievement, rv))
#These results are similar to the paper results
summary(pisa_filter)
lm_fulldata=lm(math_achievement ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=pisa_filter)
summary(lm_fulldata)
#List wise deletion is the same as not making any adjustments to the missing data
lm_ld_5per=lm(math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=pisa_5persample)
summary(lm_ld_5per)
lm_ld_10per=lm(math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=pisa_10persample)
summary(lm_ld_10per)
#Values of math_achievement2 will be replaced by the mean of the column
##5% data
mean_math <- mean(pisa_5persample$math_achievement2, na.rm = T) #calculate mean score to be used for imputation
pisa_5persample_mi <- pisa_5persample %>%
rowwise() %>%
mutate(math_mi=ifelse(is.na(math_achievement2),mean_math,math_achievement2))
#Run the regression using the imputed mean
lm_mi_5per=lm(math_mi ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=pisa_5persample_mi)
summary(lm_mi_5per)
##10% data
mean_math <- mean(pisa_10persample$math_achievement2, na.rm = T) #calculate mean score to be used for imputation
pisa_10persample_mi <- pisa_10persample %>%
rowwise() %>%
mutate(math_mi=ifelse(is.na(math_achievement2),mean_math,math_achievement2))
#Run the regression using the imputed mean
lm_mi_10per=lm(math_mi ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=pisa_10persample_mi)
summary(lm_mi_10per)
#Function 3. Regression imputation
##5% missing data
#Method: using MICE functionality
imp <- mice(pisa_5persample, method = "norm.nob", m = 1) # Impute data
#norm.predict = regression imputation with error
#norm.nob = regression imputation stochastic
imp2 <- complete(imp) # Store datasummary(imp2)
summary(imp2) #Missing values have been
lm_ri_5per=lm(math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=imp2)
summary(lm_ri_5per)
#Run the regression using the imputed math achievement scores
##Alternate method - gives the same result
##10% missing data
imp <- mice(pisa_10persample, method = "norm.nob", m = 1) # Impute data
#norm.predict = regression imputation with error
#norm.nob = regression imputation stochastic
imp2 <- complete(imp) # Store datasummary(imp2)
summary(imp2)
#Run the regression using the imputed math achievement scores
lm_ri_10per=lm(math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=imp2)
summary(lm_ri_10per)
#4. EM maximization
install.packages("mvdalab")
library(mvdalab)
imp= imputeEM(pisa_em, impute.ncomps = 1, pca.ncomps = 1, CV = TRUE, Init = "mean",
scale = TRUE, iters = 25, tol = .Machine$double.eps^0.25)
summary(imp$Imputed.DataFrames)
imp[[1,]]
install.packages("huxtable")
install.packages("mvdalab")
#5. Multiple imputation
###5% missing data
md.pattern(pisa_5persample, plot = F)
imp <- mice(pisa_5persample, m=5, maxit=10, meth='pmm',seed=500, printFlag = F)
#mice is the package for performing multiple imputations
#m=5: number of multiple imputations i.e. 5 completed datasets will be generated
#maxit=10: number of iterations run
#pmm: predictive mean matching
modelFit3 <- pisa_5persample %>%
mice(m=5, maxit=10, meth='pmm',seed=500, printFlag = F) %>%
mice::complete("long")  %>%
by(as.factor(.$.imp), lm, formula = math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement) %>%
as.list() %>%
.[[-1]] %>%
pool()
export_summs(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1, error_style = c("stderr", "ci", "statistic", "pvalue"), model.names = c("Full model","List wise deletion", "Mean imputation", "Regression imputation", ""))
lm_multim_10per
View(x)
x$term
x$estimate
View(x)
library(stargazer)
install.packages("stargazer")
install.packages("stargazer")
library(stargazer)
stargazer(lm_fulldata, lm_ld_5per, lm_mi_5per)
stargazer(lm_fulldata, lm_ld_5per, lm_mi_5per, type = "html")
kable(summary(lm_fulldata)$coeff)
lm_multim_10per
lm_multim_5per
lm_multim_10per lm_multim_5per
screenreg(lm_multim_10per lm_multim_5per)
md.pattern(pisa_5persample, plot = F)
imp <- mice(pisa_5persample, m=5, maxit=10, meth='pmm',seed=500, printFlag = F)
#mice is the package for performing multiple imputations
#m=5: number of multiple imputations i.e. 5 completed datasets will be generated
#maxit=10: number of iterations run
#pmm: predictive mean matching
modelFit3 <- pisa_5persample %>%
mice(m=5, maxit=10, meth='pmm',seed=500, printFlag = F) %>%
mice::complete("long")  %>%
by(as.factor(.$.imp), lm, formula = math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement) %>%
as.list() %>%
.[[-1]] %>%
pool()
summary(pisa_5persample)
summary(imp) #we see that the missing values
#modelFit1 <- with(imp,lm(math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement))
#modelFit1 #the regression has been run for each of the imputed datasets
#summary(pool(modelFit1)) #this pools the results from the 5 regressions
#write function to output result
#create a list from imputation - makes export easier
implist <- miceadds::mids2datlist(imp)
modelFit2 <- with(implist,lm(math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement))
summary(pool(modelFit2))
#extract
extract.df <- function(tt, cl = NULL) {
require(sandwich)
require(mitools)
require(texreg)
m2 <- length(tt) #number of imputations
betas <- lapply(tt, coef)
vars <- lapply(tt, vcov)
# conduct statistical inference and save results into a data.frame
model1 <- summary(pool_mi(betas, vars))
R2 <- mean(sapply(1:m2, function(x) summary(tt[[x]])$r.squared))
#technically, should use R to Z-- but close for now when R is low
ns <- nobs(tt[[1]])
#creates what is used by texreg
tr <- createTexreg(
coef.names = row.names(model1),
coef = model1$results,
se = model1$se,
pvalues = model1$p,
gof.names = c("R2", "Nobs"),
gof = c(R2, ns),
gof.decimal = c(T,F)
)
}
out1 <- extract.df(modelFit2)
lm_multim_5per = screenreg(out1, digits = 3)
###10% missing data
md.pattern(pisa_10persample, plot = F)
imp <- mice(pisa_10persample, m=5, maxit=10, meth='pmm',seed=500, printFlag = F)
#mice is the package for performing multiple imputations
#m=5: number of multiple imputations i.e. 5 completed datasets will be generated
#maxit=10: number of iterations run
#pmm: predictive mean matching
summary(pisa_10persample)
summary(imp) #we see that the missing values
#modelFit1 <- with(imp,lm(math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement))
#modelFit1 #the regression has been run for each of the imputed datasets
#summary(pool(modelFit1)) #this pools the results from the 5 regressions
#write function to output result
#create a list from imputation - makes export easier
implist <- miceadds::mids2datlist(imp)
modelFit2 <- with(implist,lm(math_achievement2 ~ student_gender + stdHEDRES + stdANXMAT + read_achievement))
x=summary(pool(modelFit2))
out2 <- extract.df(modelFit2)
screenreg(out1, out2, digits = 3)
screenreg(out1 out2, digits = 3)
??screenreg
screenreg(out1, out2)
out1
out2
screenreg(list(out1, out2))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1, out2))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1), custom.columns= c("Full model","List wise deletion", "Mean imputation", "Regression imputation", "Multiple imputation"))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1), custom.columns= list(c("Full model","List wise deletion", "Mean imputation", "Regression imputation", "Multiple imputation")))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1), custom.header= list("Full model","List wise deletion", "Mean imputation", "Regression imputation", "Multiple imputation"))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1), custom.header= list("Full model"=1,"List wise deletion"=2, "Mean imputation"=3, "Regression imputation"=4, "Multiple imputation"=5))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1), custom.header= list("Full model"=1,"List wise deletion"=2, "Mean imputation"=3, "Regression imputation"=4, "Multiple imputation"=5,booktabs = TRUE))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1), custom.header= list("Full model"=1,"List wise deletion"=2, "Mean imputation"=3, "Regression imputation"=4, "Multiple imputation"=5), booktabs = TRUE)
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1), custom.header= list("Full model"=1,"List wise deletion"=2, "Mean imputation"=3, "Regression imputation"=4, "Multiple imputation"=5), column.spacing = 5)
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"Deletion"=2, "Mean"=3, "Regression"=4, "Multiple (MI)"=5), column.spacing = 5,
custom.coef.names=c("Intercept", "Home education "))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"Deletion"=2, "Mean"=3, "Regression"=4, "Multiple (MI)"=5), column.spacing = 5,
custom.coef.names=c("Intercept", "Home education resources (std)", "Math anxiety (std)", "reading achievement"))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"Deletion"=2, "Mean"=3, "Regression"=4, "Multiple (MI)"=5), column.spacing = 5,
custom.coef.names=list(c("Intercept", "Home education resources (std)", "Math anxiety (std)", "reading achievement")))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1), custom.header= list("Full model"=1,"Deletion"=2, "Mean"=3, "Regression"=4, "Multiple (MI)"=5), column.spacing = 5,custom.coef.names=c("Intercept", "Home education resources", "Math anxiety (std)", "reading achievement"))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"Deletion"=2, "Mean"=3, "Regression"=4, "Multiple (MI)"=5),
column.spacing = 5,
custom.coef.names=c("Intercept"))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"Deletion"=2, "Mean"=3, "Regression"=4, "Multiple (MI)"=5),
column.spacing = 5,
custom.coef.names=c("Inter"))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"Deletion"=2, "Mean"=3, "Regression"=4, "Multiple (MI)"=5),
column.spacing = 5,
custom.coef.names=c("Int"))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"Deletion"=2, "Mean"=3, "Regression"=4, "Multiple (MI)"=5),
column.spacing = 5,
custom.coef.names = c("Intercept"))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"Deletion"=2, "Mean"=3, "Regression"=4, "Multiple (MI)"=5),
column.spacing = 5,
custom.coef.names = c(NA))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"List wise deletion"=2, "Mean imputation"=3, "Regression imputation"=4, "Multiple imputation"=5), column.spacing = 5,
custom.coef.names=as.character.factor(c("Intercept", "Home education "))
)
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"List wise deletion"=2, "Mean imputation"=3, "Regression imputation"=4, "Multiple imputation"=5), column.spacing = 5,
custom.coef.names=as.character(c("Intercept", "Home education ")))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"List wise deletion"=2, "Mean imputation"=3, "Regression imputation"=4, "Multiple imputation"=5), column.spacing = 5,
custom.coef.names=list(c("Intercept", "Home education ")))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"List wise deletion"=2, "Mean imputation"=3, "Regression imputation"=4, "Multiple imputation"=5), column.spacing = 5,
custom.coef.names=(c("Intercept", "Home education ")))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"List wise deletion"=2, "Mean imputation"=3, "Regression imputation"=4, "Multiple imputation"=5),
custom.coef.names=(c("Intercept", "Home education ")))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"List wise deletion"=2, "Mean imputation"=3, "Regression imputation"=4, "Multiple imputation"=5), column.spacing = 5,
custom.coef.names=(c("Intercept", "Home education", "", "", "")))
lm_fulldata
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"List wise deletion"=2, "Mean imputation"=3, "Regression imputation"=4, "Multiple imputation"=5), column.spacing = 5)
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"List wise deletion"=2, "Mean imputation"=3, "Regression imputation"=4, "Multiple imputation"=5), column.spacing = 5,
custom.coef.names=(c("Intercept", "Student gender", "Home education resources", "Math anxiety", "Reading achievement"))
)
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"List wise deletion"=2, "Mean imputation"=3, "Regression imputation"=4, "Multiple imputation"=5),
custom.coef.names=(c("Intercept", "Student gender", "Home education resources", "Math anxiety", "Reading achievement"))
)
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"List deletion"=2, "Mean"=3, "Regression "=4, "Multiple imp"=5),
custom.coef.names=(c("Intercept", "Student gender", "Home education resources", "Math anxiety", "Reading achievement")))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"Deletion"=2, "Mean"=3, "Regression "=4, "Multiple imp"=5),
custom.coef.names=(c("Intercept", "Student gender", "Home education resources", "Math anxiety", "Reading achievement")))
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"Deletion"=2, "Mean"=3, "Regression "=4, "Multiple(MI)"=5),
custom.coef.names=(c("Intercept", "Student gender", "Home education resources", "Math anxiety", "Reading achievement")))
lm_ld_5per
summary(lm_ld_5per)
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"Deletion"=2, "Mean"=3, "Regression"=4, "Multiple (MI)"=5),
column.spacing = 5,
include.fstatistic = TRUE)
screenreg(list(lm_fulldata, lm_ld_5per, lm_mi_5per,  lm_ri_5per, out1),
custom.header= list("Full model"=1,"Deletion"=2, "Mean"=3, "Regression"=4, "Multiple (MI)"=5),
column.spacing = 5,
include.fstatistic = TRUE)
fun.trial = function(data){
lm_fulldata=lm(math_achievement ~ student_gender + stdHEDRES + stdANXMAT + read_achievement, data=data)
return(lm_fulldata)
}
fun.trial(pisa_filter)
